$group

    function fillContents
        param parent
        param currentObj
        param resultObj
        if !currentObj.contents
            log currentObj.kind
            log currentObj.id
            return
        if parent.wzElement == "text"
            _ currentObj.contents.push
                {
                    @ line parent.wzName
        elif parent.wzElement == 'quote'
            _ currentObj.contents.push
                {
                    @ quote
                        _ fillQuote
                            @ parent
                            @ currentObj
                            @ resultObj
        elif parent.wzElement == 'comment'
            _ currentObj.contents.push
                {
                    @ comment parent.toJson()
        elif parent.wzElement == 'concept' && currentObj.kind == 'concept'
            var savens = resultObj.ns
            set resultObj.ns = currentObj.id
            _ functors.concept        
                @ parent
                @ resultObj
            set resultObj.ns = savens
            _ currentObj.contents.push
                {
                    @ concept currentObj.id + '.' + parent.wzName
        elif parent.wzElement == 'relatedconcept'
            var rconceptObj
                {
                    @ kind 'rconcept'
                    @ id parent.wzName
                    [ contents
            foreach child in parent.items
                if !fillContents(child, rconceptObj, resultObj)
                else
                    $$ TODO error
            _ currentObj.contents.push
                @ rconceptObj
            _ resultObj.relations.push
                {
                    @ kind 'rconcept'
                    @ from currentObj.id
                    @ to parent.wzName
        else
            return true

    function fillQuote
        param parent
        param currentObj
        param resultObj
        var quoteObj
            {
                @ author (resultObj.ns_author || 'global')
                [ lines
        foreach child in parent.items
            if child.wzElement == 'text'
                _ quoteObj.lines.push
                    @ child.wzName
            elif child.wzElement == 'author'
                set quoteObj.author = child.wzName
                foreach item in child.items
                    if item.wzElement == 'text'
                        _ quoteObj.lines.push
                            @ item.wzName
                    else
                        set quoteObj.unknown = item.wzElement
            elif child.wzElement == 'page'
                set quoteObj.page = child.wzName
            elif child.wzElement == 'kindleloc'
                set quoteObj.kindleloc = child.wzName
            elif child.wzElement == 'kindlepage'
                set quoteObj.kindlepage = child.wzName
            elif child.wzElement == 'book'
                set quoteObj.book = child.wzName
                _ functors.book
                    @ child
                    @ resultObj
            elif child.wzElement == 'article'
                set quoteObj.article = child.wzName
                _ functors.article
                    @ child
                    @ resultObj
            elif child.wzElement == 'comment'
                set quoteObj.comment
                    _ functors.comment
                        @ child
                        @ resultObj
            else
                set quoteObj.unknown = child.wzElement
        return quoteObj